[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse_and_write_files",
        "kind": 2,
        "importPath": "deploy_monGARS_bundle",
        "description": "deploy_monGARS_bundle",
        "peekOfCode": "def parse_and_write_files():\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    with open(SOURCE_FILE, \"r\", encoding=\"utf-8\") as f:\n        content = f.read()\n    pattern = r\"// ===== File: (.*?) =====\\n\\n(.*?)\\n\\n// ===== End of File: \\1 =====\"\n    matches = re.findall(pattern, content, re.DOTALL)\n    for filename, file_content in matches:\n        full_path = os.path.join(DEST_DIR, filename)\n        os.makedirs(os.path.dirname(full_path), exist_ok=True)",
        "detail": "deploy_monGARS_bundle",
        "documentation": {}
    },
    {
        "label": "run_post_install",
        "kind": 2,
        "importPath": "deploy_monGARS_bundle",
        "description": "deploy_monGARS_bundle",
        "peekOfCode": "def run_post_install():\n    os.chdir(DEST_DIR)\n    if os.path.exists(\"package.json\"):\n        print(\"[🔧] Running npm install...\")\n        os.system(\"npm install\")\n    else:\n        print(\"[⚠️] No package.json found, skipping npm install.\")\nif __name__ == \"__main__\":\n    parse_and_write_files()\n    run_post_install()",
        "detail": "deploy_monGARS_bundle",
        "documentation": {}
    },
    {
        "label": "SOURCE_FILE",
        "kind": 5,
        "importPath": "deploy_monGARS_bundle",
        "description": "deploy_monGARS_bundle",
        "peekOfCode": "SOURCE_FILE = \"monGARS_complete_project_bundle.txt\"\nDEST_DIR = \"monGARS_project\"\ndef parse_and_write_files():\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    with open(SOURCE_FILE, \"r\", encoding=\"utf-8\") as f:\n        content = f.read()\n    pattern = r\"// ===== File: (.*?) =====\\n\\n(.*?)\\n\\n// ===== End of File: \\1 =====\"\n    matches = re.findall(pattern, content, re.DOTALL)\n    for filename, file_content in matches:",
        "detail": "deploy_monGARS_bundle",
        "documentation": {}
    },
    {
        "label": "DEST_DIR",
        "kind": 5,
        "importPath": "deploy_monGARS_bundle",
        "description": "deploy_monGARS_bundle",
        "peekOfCode": "DEST_DIR = \"monGARS_project\"\ndef parse_and_write_files():\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    with open(SOURCE_FILE, \"r\", encoding=\"utf-8\") as f:\n        content = f.read()\n    pattern = r\"// ===== File: (.*?) =====\\n\\n(.*?)\\n\\n// ===== End of File: \\1 =====\"\n    matches = re.findall(pattern, content, re.DOTALL)\n    for filename, file_content in matches:\n        full_path = os.path.join(DEST_DIR, filename)",
        "detail": "deploy_monGARS_bundle",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "split",
        "description": "split",
        "peekOfCode": "def main():\n    input_file = 'monGARS_complete_codebase24.txt'\n    if not os.path.exists(input_file):\n        print(f\"Error: '{input_file}' not found in the current directory.\")\n        return\n    file_pattern = re.compile(r'^// ===== File: (.+) =====')\n    current_path = None\n    buffer = []\n    with open(input_file, 'r') as f:\n        for line in f:",
        "detail": "split",
        "documentation": {}
    },
    {
        "label": "write_file",
        "kind": 2,
        "importPath": "split",
        "description": "split",
        "peekOfCode": "def write_file(path, lines):\n    # Ensure directory exists\n    dir_path = os.path.dirname(path)\n    if dir_path and not os.path.exists(dir_path):\n        os.makedirs(dir_path, exist_ok=True)\n    # Write file\n    with open(path, 'w') as f:\n        f.writelines(lines)\n    print(f\"Written: {path}\")\nif __name__ == \"__main__\":",
        "detail": "split",
        "documentation": {}
    }
]